/**
* This controller is responsible for placing and getting the cost of orders
* It handles the following routes
* 1. /api/order/get-cost
* 2. /api/order/place-order
* @author  Enokela Acheme Paul
* @email    achemepaulenokela@gmail.com
* @version 1.0
*/

package org.byteworks.javatest;

import java.util.HashMap;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


@RestController
public class OrderController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private OrderRepository orderRepository;
    @Autowired
    private MealRepository mealRepository;
    @Autowired
    private VendorRepository vendorRepository;
    @Autowired
    private JavaMailSender javaMailSender;

    private HashMap<String, Object> res;

    // payment by card offers 25% discount
    private static final double cardDiscount = 0.025;
    // cost per metre is N10
    private static final double costPerMetreOfficeDelivery = 10.00;
    // GPS Latitude coordinate of byteworks (an asumption!)
    private static final double officeLat = 9.0765;
    // GPS Longitude coordinate of byteworks (an asumption!)
    private static final double officeLng = 7.3986;

    // whether or not to send emailNotification to Vendor
    private boolean sendEmailNotification = false;

    // http://localhost:8080/api/order/place-order?mealId=9&vendorId=1&userId=6&paymentMethod=cash&deliveryOption=office&deliveryAddress=Nurses%20Estate
    // http://localhost:8080/api/order/get-cost?mealId=9&vendorId=1&userId=6&paymentMethod=cash&deliveryOption=office

    /*
     * method to get total cost of order
     */
    @RequestMapping(value="/api/order/get-cost", method=RequestMethod.GET)
    public HashMap<String, Object> getOrderCost(
            // id of meal
            @RequestParam(value = "mealId", required = true) int mealId,
            // id of vendor
            @RequestParam(value = "vendorId", required = true) int vendorId,
            // payment method, could be either card or cash (pay on delivery)
            @RequestParam(value = "paymentMethod", required = true) String paymentMethod,
            // delivery option could be either office delivery or pick up delivery
            @RequestParam(value = "deliveryOption", required = true) String deliveryOption) {

        // prepare response object, HashMap's get automattically mapped to JSON by
        // spring
        res = new HashMap<>();

        // get the meal
        Optional<Meal> meal = mealRepository.findById(mealId);
        // check if meal was found
        if (meal.isPresent()) {
            // get total cost of meal see {@Link calculateTotalCost}
            double totalCost = this.calculateTotalCost(meal, vendorId, deliveryOption, paymentMethod);
            // output total cost
            res.put("totalCost", totalCost);
            return res;

        }
        // meal not found
        else {
            return ErrorResponse.respond(Constants.MEAL_ERROR_NOT_FOUND);
        }
    }

    /*
     * method to place order
     */
    @RequestMapping(value="/api/order/place-order", method=RequestMethod.POST)
    public HashMap<String, Object> placeOrder(
            //id of the vendor
            @RequestParam(value = "vendorId", required = true) int vendorId,
            //meal id
            @RequestParam(value = "mealId", required = true) int mealId,
            //user(developer) id
            @RequestParam(value = "userId", required = true) int userId,
            // payment method, could be either card or cash (pay on delivery)
            @RequestParam(value = "paymentMethod", required = true) String paymentMethod,
            // delivery option could be either office delivery or pick up delivery
            @RequestParam(value = "deliveryOption", required = true) String deliveryOption
            ) {

         //prepare HashMap to hold final response       
        res = new HashMap<>();

        Optional<Meal> meal = mealRepository.findById(mealId);
        //check if meal is found
        if (meal.isPresent()) {
            // get total cost of meal see {@Link calculateTotalCost}
            double totalCost = calculateTotalCost(meal, vendorId, deliveryOption, paymentMethod);

            //create new order
            Order_ order = new Order_(userId, mealId, vendorId, totalCost, paymentMethod, deliveryOption);
            //save the order to the database
            orderRepository.save(order);

            //get vendor mail (for sending notification)
            String vendorMail = vendorRepository.findById(vendorId).get().getVendorEmail();
            try {
                // send notification to vendor using JavaMailer see {@Link sendEmailNotification}
                sendEmailNotification(vendorMail, Constants.NOTIFICATION_SUBJECT, Constants.NOTIFICATION_TEXT);
            } catch (Exception ex) {
                System.out.println("Error sending notification mail, check console log for details " + ex.toString());
            }
            res.put("success", true);
            res.put("msg", "order placed successfully");
            return res;

        } else {
            return ErrorResponse.respond(Constants.MEAL_ERROR_NOT_FOUND);
        }

    }

    /* method to calculate total cost of order
    */
    private double calculateTotalCost(Optional<Meal> meal, int vendorId, String deliveryOption, String paymentMethod) {
        //variable to hold final total cost
        double totalCost = 0.0;
        //variable to hold cost after including logistics
        double costAfterLogistics = 0.0;
        //get price of meal
        double mealPrice = (double) meal.get().getPrice();

        //office delivery attracts logistics cost of N10/meter
        if (deliveryOption.equals(Constants.DELIVERY_OPTION_OFFICE)) {
            //get vendor GPS Coordinates from db
            double vendorLat = vendorRepository.findById(vendorId).get().getVendorLat();
            double vendorLng = vendorRepository.findById(vendorId).get().getVendorLng();
            // calculate the distance between the vendor kitchen and office
            //see HaversineAlgorithm under utils.HaversineAlgorith.java
            double distance = HaversineAlgorithm.distanceInM(officeLat, officeLng, vendorLat, vendorLng);

            double logisticsCost = costPerMetreOfficeDelivery * distance;

            costAfterLogistics = mealPrice + logisticsCost;
        }

        // Pick up delivery, no additional logistics cost
        else {
            costAfterLogistics = mealPrice;
        }

        //apply discount 
        //NOTE: Discount only applies when card was used for payment
        double discount = applyDiscount(paymentMethod, costAfterLogistics);

        totalCost = costAfterLogistics - discount;

        return totalCost;
    }

    private double applyDiscount(String paymentMethod, double cost) {
        //variable to hold discount
        double discount = 0.0;
        //discount only applies when card was used for payment
        if (paymentMethod.equals(Constants.PAYMENT_OPTION_CARD)) {
            //calculate discount
            discount = cost * cardDiscount;
        }

        return discount;
    }

    private void sendEmailNotification(String vendorMail, String subject, String message) throws Exception {
        if (sendEmailNotification) {
            SimpleMailMessage msg = new SimpleMailMessage();
            msg.setTo(vendorMail);
            msg.setSubject(Constants.NOTIFICATION_SUBJECT);
            msg.setText(Constants.NOTIFICATION_TEXT);

            javaMailSender.send(msg);

        }

    }

}